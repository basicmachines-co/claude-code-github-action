name: 'Claude Code GitHub Action'
description: 'GitHub action for Claude Code Integration in PR comments'
branding:
  icon: 'message-square'
  color: 'purple'

inputs:
  mode:
    description: 'The mode to run the action in (review, pr-comment, comment, direct)'
    required: true
    default: 'review'
  pr-number:
    description: 'Pull request number'
    required: false
  feedback:
    description: 'The feedback text from the comment'
    required: false
  anthropic-api-key:
    description: 'Anthropic API key for Claude access'
    required: true
  github-token:
    description: 'GitHub token for API access'
    required: true
  model-id:
    description: 'Claude model ID to use'
    required: false
    default: 'claude-3-7-sonnet-20250219'
  use-bedrock:
    description: 'Whether to use AWS Bedrock for Claude access'
    required: false
    default: 'false'
  max-tokens:
    description: 'Maximum tokens to generate in the response'
    required: false
    default: '4096'
  temperature:
    description: 'Temperature for generation'
    required: false
    default: '0.7'
  output-file:
    description: 'Path to write the output to'
    required: false
    default: 'claude-code-output'

runs:
  using: 'composite'
  steps:
    - name: Setup GitHub CLI
      shell: bash
      run: |
        # Make sure GitHub CLI is available with token
        echo "${{ inputs.github-token }}" | gh auth login --with-token
        
    - name: Install Claude Code CLI
      shell: bash
      run: |
        # Install Claude Code CLI
        npm install -g @anthropic-ai/claude-code
        
    - name: Process PR comment with Claude
      if: inputs.mode == 'review' || inputs.mode == 'pr-comment'
      shell: bash
      run: |
        # Set Anthropic API key
        export ANTHROPIC_API_KEY="${{ inputs.anthropic-api-key }}"
        
        # Set up AWS environment if using Bedrock
        if [[ "${{ inputs.use-bedrock }}" == "true" ]]; then
          if [[ -n "${{ env.BEDROCK_AWS_ACCESS_KEY_ID }}" && -n "${{ env.BEDROCK_AWS_SECRET_ACCESS_KEY }}" ]]; then
            mkdir -p ~/.aws
            cat > ~/.aws/credentials << EOF
        [default]
        aws_access_key_id = ${{ env.BEDROCK_AWS_ACCESS_KEY_ID }}
        aws_secret_access_key = ${{ env.BEDROCK_AWS_SECRET_ACCESS_KEY }}
        EOF
            if [[ -n "${{ env.BEDROCK_AWS_REGION }}" ]]; then
              cat > ~/.aws/config << EOF
        [default]
        region = ${{ env.BEDROCK_AWS_REGION }}
        EOF
            fi
          fi
        fi
        
        # Create a temp file for Claude's response
        RESPONSE_FILE=$(mktemp)
        
        # Get PR details using GitHub CLI
        echo "Fetching PR details for PR #${{ inputs.pr-number }}"
        PR_DETAILS=$(gh pr view ${{ inputs.pr-number }} --json title,body,baseRefName,headRefName,additions,deletions,changedFiles,state)
        
        PR_TITLE=$(echo "$PR_DETAILS" | jq -r '.title')
        PR_BODY=$(echo "$PR_DETAILS" | jq -r '.body')
        PR_BASE=$(echo "$PR_DETAILS" | jq -r '.baseRefName')
        PR_HEAD=$(echo "$PR_DETAILS" | jq -r '.headRefName')
        PR_STATE=$(echo "$PR_DETAILS" | jq -r '.state')
        PR_ADDITIONS=$(echo "$PR_DETAILS" | jq -r '.additions')
        PR_DELETIONS=$(echo "$PR_DETAILS" | jq -r '.deletions')
        PR_CHANGED_FILES=$(echo "$PR_DETAILS" | jq -r '.changedFiles')
        
        # Get list of files changed
        echo "Fetching files changed in the PR"
        PR_FILES=$(gh pr view ${{ inputs.pr-number }} --json files)
        FILES_LIST=$(echo "$PR_FILES" | jq -r '.files[] | "- " + .path + " (" + .status + ", +" + (.additions | tostring) + "/-" + (.deletions | tostring) + ")"')
        
        # Get repo information
        REPO_INFO=$(gh repo view --json name,description,defaultBranchRef,languages)
        REPO_NAME=$(echo "$REPO_INFO" | jq -r '.name')
        REPO_DESC=$(echo "$REPO_INFO" | jq -r '.description')
        REPO_DEFAULT_BRANCH=$(echo "$REPO_INFO" | jq -r '.defaultBranchRef.name')
        REPO_LANGUAGES=$(echo "$REPO_INFO" | jq -r '.languages[].name' | tr '\n' ', ' | sed 's/,$//')
        
        # Build the prompt with rich context
        PROMPT=$(cat <<EOF
        You are Claude, an AI assistant helping with code review in GitHub.
        
        Repository: $REPO_NAME
        Repository Description: ${REPO_DESC:-No description provided}
        Default Branch: $REPO_DEFAULT_BRANCH
        Languages: ${REPO_LANGUAGES:-Unknown}
        
        Pull Request #${{ inputs.pr-number }}: $PR_TITLE
        PR Description:
        ${PR_BODY:-No description provided}
        
        PR Status: $PR_STATE
        Branch: $PR_HEAD â†’ $PR_BASE
        Changes: +$PR_ADDITIONS/-$PR_DELETIONS in $PR_CHANGED_FILES files
        
        Files changed in this PR:
        $FILES_LIST
        
        User query:
        ${{ inputs.feedback }}
        
        Provide a helpful, clear and concise response to this query in the context of this PR. Focus on giving accurate, actionable advice or explanations. Include code examples when appropriate.
        EOF
        )
        
        # Set up the Claude command
        CLAUDE_CMD="claude"
        CLAUDE_CMD+=" --model ${{ inputs.model-id }}"
        CLAUDE_CMD+=" --max-tokens ${{ inputs.max-tokens }}"
        CLAUDE_CMD+=" --temperature ${{ inputs.temperature }}"
        
        if [[ "${{ inputs.use-bedrock }}" == "true" ]]; then
          CLAUDE_CMD+=" --provider bedrock"
        fi
        
        # Run Claude and capture output
        echo "Sending request to Claude..."
        echo "$PROMPT" | $CLAUDE_CMD -p - > "$RESPONSE_FILE"
        
        # Post response as PR comment
        echo "Posting Claude's response as PR comment"
        gh pr comment ${{ inputs.pr-number }} --body-file "$RESPONSE_FILE"
        
        # Clean up
        rm -f "$RESPONSE_FILE"
        
        echo "Claude's response posted successfully!"
        
    - name: Process direct request with Claude
      if: inputs.mode == 'direct'
      shell: bash
      run: |
        # Set Anthropic API key
        export ANTHROPIC_API_KEY="${{ inputs.anthropic-api-key }}"
        
        # Set up AWS environment if using Bedrock
        if [[ "${{ inputs.use-bedrock }}" == "true" ]]; then
          if [[ -n "${{ env.BEDROCK_AWS_ACCESS_KEY_ID }}" && -n "${{ env.BEDROCK_AWS_SECRET_ACCESS_KEY }}" ]]; then
            mkdir -p ~/.aws
            cat > ~/.aws/credentials << EOF
        [default]
        aws_access_key_id = ${{ env.BEDROCK_AWS_ACCESS_KEY_ID }}
        aws_secret_access_key = ${{ env.BEDROCK_AWS_SECRET_ACCESS_KEY }}
        EOF
            if [[ -n "${{ env.BEDROCK_AWS_REGION }}" ]]; then
              cat > ~/.aws/config << EOF
        [default]
        region = ${{ env.BEDROCK_AWS_REGION }}
        EOF
            fi
          fi
        fi
        
        # Set up the Claude command
        CLAUDE_CMD="claude"
        CLAUDE_CMD+=" --model ${{ inputs.model-id }}"
        CLAUDE_CMD+=" --max-tokens ${{ inputs.max-tokens }}"
        CLAUDE_CMD+=" --temperature ${{ inputs.temperature }}"
        
        if [[ "${{ inputs.use-bedrock }}" == "true" ]]; then
          CLAUDE_CMD+=" --provider bedrock"
        fi
        
        # Run Claude and capture output
        echo "Sending request to Claude..."
        echo "${{ inputs.feedback }}" | $CLAUDE_CMD -p - > "${{ inputs.output-file }}"
        
        echo "Claude's response written to ${{ inputs.output-file }}"